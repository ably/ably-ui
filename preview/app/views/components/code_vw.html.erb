<%= render(TitleComponent.new(react: true, vw: true)) do %>
  Code Component
<% end %>

<h1 class="ui-text-h2 my-16">JavaScript</h1>

<%= render(AblyUi::Core::Code.new(language: "javascript",
  snippet: %q{
var ably = new Ably.Realtime('1WChTA.mc0Biw:kNfiYG4KiPgmHHgH');
var channel = ably.channels.get('web-pal');

// Subscribe to messages on channel
channel.subscribe('greeting', function(message) {
  alert(message.data);
});
})) %>

<h1 class="ui-text-h2 my-16">iOS Swift</h1>

<%= render(AblyUi::Core::Code.new(language: "swift",
  snippet: %q{
let ably = ARTRealtime(key: "1WChTA.mc0Biw:kNfiYG4KiPgmHHgH")
let channel = ably.channels.get("web-pal")

// Subscribe to messages on channel
channel.subscribe("greeting") { message in
  print("\(message.data)")
}
})) %>

<h1 class="ui-text-h2 my-16">Java</h1>

<%= render(AblyUi::Core::Code.new(language: "java",
  snippet: %q{
AblyRealtime ably = new AblyRealtime("1WChTA.mc0Biw:kNfiYG4KiPgmHHgH");
Channel channel = ably.channels.get("web-pal");

/* Subscribe to messages on channel */

MessageListener listener;
listener = new MessageListener() {
  @Override
  public void onMessage(Message message) {
    System.out.print(message.data);
  };
};
channel.subscribe("greeting", listener);
})) %>


<h1 class="ui-text-h2 my-16">Kotlin</h1>

<%= render(AblyUi::Core::Code.new(language: "kotlin",
  snippet: %q{
val exampleConstraints = DefaultResolutionConstraints(
  DefaultResolutionSet( // this constructor provides one Resolution for all states
      Resolution(
          accuracy = Accuracy.BALANCED,
          desiredInterval = 1000L,
          minimumDisplacement = 1.0
      )
  ),
  proximityThreshold = DefaultProximity(spatial = 1.0),
  batteryLevelThreshold = 10.0f,
  lowBatteryMultiplier = 2.0f
)
})) %>

<% content_for :component do %>
  <%= javascript_packs_with_chunks_tag 'code-vw' %>
<% end %>

// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`JS Components/Code CodeWithLines smoke-test 1`] = `
<div class="hljs overflow-auto flex p-32 "
     data-id="code"
>
  <div>
    <p class="mr-24 font-mono text-right text-neutral-800 ">
      1
    </p>
    <p class="mr-24 font-mono text-right text-neutral-800 ">
      2
    </p>
    <p class="mr-24 font-mono text-right text-neutral-800 ">
      3
    </p>
    <p class="mr-24 font-mono text-right text-neutral-800 ">
      4
    </p>
    <p class="mr-24 font-mono text-right text-neutral-800 ">
      5
    </p>
    <p class="mr-24 font-mono text-right text-neutral-800 ">
      6
    </p>
    <p class="mr-24 font-mono text-right text-neutral-800 ">
      7
    </p>
  </div>
  <pre lang="javascript">
    <code class="language-javascript ui-text-code">
      <span class="hljs-keyword">
        var
      </span>
      ably =
      <span class="hljs-keyword">
        new
      </span>
      <span class="hljs-title class_">
        Ably
      </span>
      .
      <span class="hljs-title class_">
        Realtime
      </span>
      (
      <span class="hljs-string">
        '1WChTA.mc0Biw:kNfiYG4KiPgmHHgH'
      </span>
      );
      <span class="hljs-keyword">
        var
      </span>
      channel = ably.
      <span class="hljs-property">
        channels
      </span>
      .
      <span class="hljs-title function_">
        get
      </span>
      (
      <span class="hljs-string">
        'web-pal'
      </span>
      );
      <span class="hljs-comment">
        // Subscribe to messages on channel
      </span>
      channel.
      <span class="hljs-title function_">
        subscribe
      </span>
      (
      <span class="hljs-string">
        'greeting'
      </span>
      ,
      <span class="hljs-keyword">
        function
      </span>
      (
      <span class="hljs-params">
        message
      </span>
      ) {
      <span class="hljs-title function_">
        alert
      </span>
      (message.
      <span class="hljs-property">
        data
      </span>
      );
});
    </code>
  </pre>
</div>
`;

exports[`JS Components/Code Java smoke-test 1`] = `
<div class="hljs overflow-auto flex p-32 "
     data-id="code"
>
  <pre lang="java">
    <code class="language-java ui-text-code">
      <span class="hljs-type">
        AblyRealtime
      </span>
      <span class="hljs-variable">
        ably
      </span>
      <span class="hljs-operator">
        =
      </span>
      <span class="hljs-keyword">
        new
      </span>
      <span class="hljs-title class_">
        AblyRealtime
      </span>
      (
      <span class="hljs-string">
        "1WChTA.mc0Biw:kNfiYG4KiPgmHHgH"
      </span>
      );
      <span class="hljs-type">
        Channel
      </span>
      <span class="hljs-variable">
        channel
      </span>
      <span class="hljs-operator">
        =
      </span>
      ably.channels.get(
      <span class="hljs-string">
        "web-pal"
      </span>
      );
      <span class="hljs-comment">
        /* Subscribe to messages on channel */
      </span>
      MessageListener listener;
listener =
      <span class="hljs-keyword">
        new
      </span>
      <span class="hljs-title class_">
        MessageListener
      </span>
      () {
      <span class="hljs-meta">
        @Override
      </span>
      <span class="hljs-keyword">
        public
      </span>
      <span class="hljs-keyword">
        void
      </span>
      <span class="hljs-title function_">
        onMessage
      </span>
      <span class="hljs-params">
        (Message message)
      </span>
      {
    System.out.print(message.data);
  };
};
channel.subscribe(
      <span class="hljs-string">
        "greeting"
      </span>
      , listener);
    </code>
  </pre>
</div>
`;

exports[`JS Components/Code Javascript smoke-test 1`] = `
<div class="hljs overflow-auto flex p-32 "
     data-id="code"
>
  <pre lang="javascript">
    <code class="language-javascript ui-text-code">
      <span class="hljs-keyword">
        var
      </span>
      ably =
      <span class="hljs-keyword">
        new
      </span>
      <span class="hljs-title class_">
        Ably
      </span>
      .
      <span class="hljs-title class_">
        Realtime
      </span>
      (
      <span class="hljs-string">
        '1WChTA.mc0Biw:kNfiYG4KiPgmHHgH'
      </span>
      );
      <span class="hljs-keyword">
        var
      </span>
      channel = ably.
      <span class="hljs-property">
        channels
      </span>
      .
      <span class="hljs-title function_">
        get
      </span>
      (
      <span class="hljs-string">
        'web-pal'
      </span>
      );
      <span class="hljs-comment">
        // Subscribe to messages on channel
      </span>
      channel.
      <span class="hljs-title function_">
        subscribe
      </span>
      (
      <span class="hljs-string">
        'greeting'
      </span>
      ,
      <span class="hljs-keyword">
        function
      </span>
      (
      <span class="hljs-params">
        message
      </span>
      ) {
      <span class="hljs-title function_">
        alert
      </span>
      (message.
      <span class="hljs-property">
        data
      </span>
      );
});
    </code>
  </pre>
</div>
`;

exports[`JS Components/Code Kotlin smoke-test 1`] = `
<div class="hljs overflow-auto flex p-32 "
     data-id="code"
>
  <pre lang="kotlin">
    <code class="language-kotlin ui-text-code">
      <span class="hljs-keyword">
        var
      </span>
      ably = new Ably.Realtime(
      <span class="hljs-string">
        '1WChTA.mc0Biw:kNfiYG4KiPgmHHgH'
      </span>
      );
      <span class="hljs-keyword">
        val
      </span>
      exampleConstraints = DefaultResolutionConstraints(
  DefaultResolutionSet(
      <span class="hljs-comment">
        // this constructor provides one Resolution for all states
      </span>
      Resolution(
          accuracy = Accuracy.BALANCED,
          desiredInterval =
      <span class="hljs-number">
        1000L
      </span>
      ,
          minimumDisplacement =
      <span class="hljs-number">
        1.0
      </span>
      )
  ),
  proximityThreshold = DefaultProximity(spatial =
      <span class="hljs-number">
        1.0
      </span>
      ),
  batteryLevelThreshold =
      <span class="hljs-number">
        10.0f
      </span>
      ,
  lowBatteryMultiplier =
      <span class="hljs-number">
        2.0f
      </span>
      )
    </code>
  </pre>
</div>
`;

exports[`JS Components/Code Swift smoke-test 1`] = `
<div class="hljs overflow-auto flex p-32 "
     data-id="code"
>
  <pre lang="swift">
    <code class="language-swift ui-text-code">
      <span class="hljs-keyword">
        let
      </span>
      ably
      <span class="hljs-operator">
        =
      </span>
      <span class="hljs-type">
        ARTRealtime
      </span>
      (key:
      <span class="hljs-string">
        "1WChTA.mc0Biw:kNfiYG4KiPgmHHgH"
      </span>
      )
      <span class="hljs-keyword">
        let
      </span>
      channel
      <span class="hljs-operator">
        =
      </span>
      ably.channels.get(
      <span class="hljs-string">
        "web-pal"
      </span>
      )
      <span class="hljs-comment">
        // Subscribe to messages on channel
      </span>
      channel.subscribe(
      <span class="hljs-string">
        "greeting"
      </span>
      ) { message
      <span class="hljs-keyword">
        in
      </span>
      <span class="hljs-built_in">
        print
      </span>
      (
      <span class="hljs-string">
        "
        <span class="hljs-subst">
          \\(message.data)
        </span>
        "
      </span>
      )
}
    </code>
  </pre>
</div>
`;
